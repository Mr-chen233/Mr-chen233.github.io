<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Http学习</title>
    <link href="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/03/07/Http%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP学习"><a href="#HTTP学习" class="headerlink" title="HTTP学习"></a>HTTP学习</h1><h2 id="1-HTTP基本概念"><a href="#1-HTTP基本概念" class="headerlink" title="1. HTTP基本概念"></a>1. HTTP基本概念</h2><h3 id="1-1-什么是HTTP？"><a href="#1-1-什么是HTTP？" class="headerlink" title="1.1 什么是HTTP？"></a>1.1 什么是HTTP？</h3><p>HTTP是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol。是基于TCP的应用层协议。简单来说，就是客户端发起请求，服务器响应请求（不是那么严谨，也可以是服务器与服务器之间）。</p><p>超文本传输协议，可以拆分成三个部分</p><img src="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/image-20230307202806774.png" class="" title="image-20230307202806774"><ul><li><p>协议：</p><p>  ​HTTP 是一个用在计算机世界里的<strong>协议</strong>。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（<strong>两个以上的参与者</strong>），以及相关的各种控制和错误处理方式（<strong>行为约定和规范</strong>）。</p></li><li><p>传输：</p><p>  ​HTTP 协议是一个<strong>双向协议</strong>。数据虽然是在 A 和 B 之间传输，但允许中间有<strong>中转或接力</strong>。而在 HTTP 里，需要中间人遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意额外的东西。针对<strong>传输</strong>，我们可以进一步理解了 HTTP。HTTP 是一个在计算机世界里专门用来在<strong>两点之间传输数据</strong>的约定和规范。</p></li><li><p>超文本：</p><p>  ​就是<strong>超越了普通文本的文本</strong>，它是文字、图片、视频等的混合体，最关键有超链接，能从一个超文本跳转到另外一个超文本。HTML 就是最常见的超文本了，它本身只是纯文字文件，但内部用很多标签定义了图片、视频等的链接，再经过浏览器的解释，呈现给我们的就是一个文字、有画面的网页了。</p></li></ul><p>综上，<strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</strong></p><h3 id="1-2-HTTP请求"><a href="#1-2-HTTP请求" class="headerlink" title="1.2 HTTP请求"></a>1.2 HTTP请求</h3><p>HTTP请求由三部分组成：</p><ul><li><strong>请求行</strong>：包含请求方法、请求地址和 HTTP 协议版本</li><li><strong>消息报头</strong>：包含一系列的键值对</li><li><strong>请求正文（可选）</strong>：注意和消息报头之间有一个空行</li></ul><img src="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/image-20230307203919138.png" class="" title="image-20230307203919138"><p>注： HTTP 是基于 TCP 传输协议进行通信的，而使用了 TCP 传输协议，就会存在一个“粘包”的问题，<strong>HTTP 协议通过设置回车符、换行符作为 HTTP header 的边界，通过 Content-Length 字段作为 HTTP body 的边界，这两个方式都是为了解决“粘包”的问题</strong>。</p><p>HTTP请求举例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: httpbin.org<br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>_11_3) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">54</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2840</span>.<span class="hljs-number">98</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, sdch, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">Cookie</span>: _ga=GA1.<span class="hljs-number">2</span>.<span class="hljs-number">475070272</span>.<span class="hljs-number">1480418329</span>; _gat=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上面的第一行就是一个<strong>请求行</strong>。其中，<code>GET</code> 是请求方法，表示从服务器获取资源；<code>/</code> 是一个请求地址；<code>HTTP/1.1</code> 表明 HTTP 的版本是 1.1。</p><p>请求行后面的一系列键值对就是<strong>消息报头</strong>。其中：</p><ul><li><code>Host</code> 是请求报头域，用于指定<strong>被请求资源</strong>的 Internet 主机和端口号，它通常从 HTTP URL 中提取出来；</li><li><code>Connection</code> 表示连接状态，keep-alive 表示该连接是持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，如果客户端和服务器发现对方有一段时间没有活动，就可以主动关闭连接；</li><li><code>Cache-Control</code> 用于指定缓存指令，它的值有 <code>no-cache</code>, <code>no-store</code>,<code>max-age</code> 等，<code>max-age=秒</code>表示资源在本地缓存多少秒；</li><li><code>User-Agent</code> 用于标识请求者的一些信息，比如浏览器类型和版本，操作系统等；</li><li><code>Accept</code> 用于指定客户端希望接受哪些类型的信息，比如 text&#x2F;html, image&#x2F;gif 等；</li><li><code>Accept-Encoding</code> 用于指定可接受的内容编码；</li><li><code>Accept-Language</code> 用于指定可接受的自然语言；</li><li><code>Cookie</code> 用于维护状态，可做用户认证，服务器检验等，它是浏览器储存在用户电脑上的文本片段；</li></ul><h3 id="1-3-HTTP请求方法"><a href="#1-3-HTTP请求方法" class="headerlink" title="1.3 HTTP请求方法"></a>1.3 HTTP请求方法</h3><p>HTTP 通过不同的请求方法以多种方式来操作指定的资源，常用的请求方法如下表：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">从服务器获取指定（请求地址）的资源的信息，它通常只用于读取数据，就像数据库查询一样，不会对资源进行修改。</td></tr><tr><td align="left">POST</td><td align="left">向指定资源提交数据（比如提交表单，上传文件），请求服务器进行处理。数据被包含在请求正文中，这个请求可能会创建新的资源或更新现有的资源。</td></tr><tr><td align="left">PUT</td><td align="left">通过指定资源的唯一标识（在服务器上的具体存放位置），请求服务器创建或更新资源。</td></tr><tr><td align="left">DELETE</td><td align="left">请求服务器删除指定资源。</td></tr><tr><td align="left">HEAD</td><td align="left">与 GET 方法类似，从服务器获取资源信息，和 GET 方法不同的是，HEAD 不含有呈现数据，仅仅是 HTTP 头信息。HEAD 的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获得资源的元信息（或元数据）。</td></tr><tr><td align="left">OPTIONS</td><td align="left">该方法可使服务器传回资源所支持的所有 HTTP 请求方法。</td></tr></tbody></table><h3 id="1-4-HTTP响应"><a href="#1-4-HTTP响应" class="headerlink" title="1.4 HTTP响应"></a>1.4 HTTP响应</h3><p>HTTP 响应与 HTTP 请求相似，由三部分组成：</p><ul><li><strong>状态行</strong>：包含 HTTP 协议版本、状态码和状态描述，以空格分隔</li><li><strong>响应头</strong>：即消息报头，包含一系列的键值对</li><li><strong>响应正文</strong>：返回内容，注意和响应头之间有一个空行</li></ul><img src="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/image-20230307204823216.png" class="" title="image-20230307204823216"><p>一个HTTP GET请求的响应结果：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>nginx<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Tue, 29 Nov 2016 13:08:38 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>203<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Access-Control-Allow-Credentials</span><span class="hljs-punctuation">: </span>true<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">  <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> </span><br><span class="language-json">  <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">    <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;httpbin.org&quot;</span><span class="hljs-punctuation">,</span> </span><br><span class="language-json">    <span class="hljs-attr">&quot;User-Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Paw/2.3.1 (Macintosh; OS X/10.11.3) GCDHTTPRequest&quot;</span></span><br><span class="language-json">  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> </span><br><span class="language-json">  <span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13.75.42.240&quot;</span><span class="hljs-punctuation">,</span> </span><br><span class="language-json">  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://httpbin.org/get&quot;</span></span><br><span class="language-json"><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>上面的第一行就是一个状态行，其中，<code>200</code> 是状态码，表示客户端请求成功，<code>OK</code> 是相应的状态描述。状态码是一个三位的数字，常见的状态码有以下几类：</p><ul><li>1XX 消息 – 请求已被服务接收，继续处理</li><li>2XX 成功 – 请求已成功被服务器接收、理解、并接受<ul><li>200 OK</li><li>201 Created 已创建</li><li>202 Accepted 接收</li><li>203 Non-Authoritative Information 非认证信息</li><li>204 No Content 无内容</li></ul></li><li>3XX 重定向 – 需要后续操作才能完成这一请求<ul><li>301 Moved Permanently 请求永久重定向</li><li>302 Moved Temporarily 请求临时重定向</li><li>304 Not Modified 文件未修改，可以直接使用缓存的文件</li><li>305 Use Proxy 使用代理</li></ul></li><li>4XX 请求错误 – 请求含有词法错误或者无法被执行<ul><li>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解</li><li>401 Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li><li>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</li><li>404 Not Found 请求的资源不存在，例如，输入了错误的URL</li></ul></li><li>5XX 服务器错误 – 服务器在处理某个正确请求时发生错误<ul><li>500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求</li><li>503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</li><li>504 Gateway Time-out 网关超时</li></ul></li></ul><p>状态行后面的一系列键值对就是消息报头，即响应头：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Server</span>: nginx<br><span class="hljs-type">Date</span>: Tue, <span class="hljs-number">29</span> Nov <span class="hljs-number">2016</span> <span class="hljs-number">13</span>:<span class="hljs-number">08</span>:<span class="hljs-number">38</span> GMT<br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br>Content-Length: <span class="hljs-number">203</span><br><span class="hljs-keyword">Connection</span>: <span class="hljs-keyword">close</span><br><span class="hljs-keyword">Access</span>-Control-Allow-Origin: *<br><span class="hljs-keyword">Access</span>-Control-Allow-Credentials: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>Server</code> 包含了服务器用来处理请求的软件信息，跟请求报头域 User-Agent 相对应；</li><li><code>Content-Type</code> 用于指定发送给接收者（比如浏览器）的响应正文的媒体类型，比如 text&#x2F;html, text&#x2F;css, image&#x2F;png, image&#x2F;jpeg, video&#x2F;mp4, application&#x2F;pdf, application&#x2F;json 等；</li><li><code>Content-Length</code> 指明本次回应的数据长度；</li></ul><h3 id="1-5-GET-和POST区别"><a href="#1-5-GET-和POST区别" class="headerlink" title="1.5 GET 和POST区别"></a>1.5 GET 和POST区别</h3><p>根据 RFC 规范，<strong>GET 的语义是从服务器获取指定的资源</strong>，这个资源可以是静态的文本、页面、图片视频等。<strong>GET 请求的参数位置一般是写在 URL 中</strong>，URL 规定只能支持 ASCII，所以 GET 请求的参数只允许 ASCII 字符 ，而且浏览器会对 URL 的长度有限制（HTTP协议本身对 URL长度并没有做任何规定）。为什么长度有限制？（1. 在解析url时要分配内存，且它只能当作整体看待，无法一块块处理，如果url太长，而并发又很高，就容易挤爆服务器的内存。2. 超长URL会影响搜索引擎的爬虫，有些爬虫甚至无法处理超过2000个字节的URL。）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">(简约版)<br><span class="hljs-built_in">GET</span> /index.php?<span class="hljs-attribute">name</span>=qiming.c&amp;age=22 HTTP/1.1<br>Host: localhost<br></code></pre></td></tr></table></figure><img src="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/image-20230307205946533.png" class="" title="image-20230307205946533"><p>根据 RFC 规范，<strong>POST 的语义是根据请求负荷（报文body）对指定的资源做出处理</strong>，具体的处理方式视资源类型而不同。POST 请求携带数据的位置一般是写在报文 body 中，body 中的数据可以是任意格式的数据，只要客户端与服务端协商好即可，而且浏览器不会对 body 大小做限制。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">(简约版)<br>POST /<span class="hljs-built_in">index</span>.php HTTP/<span class="hljs-number">1.1</span><br>Host: localhost<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded<br><br><span class="hljs-keyword">name</span>=qiming.c&amp;age=<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><img src="/2023/03/07/Http%E5%AD%A6%E4%B9%A0/image-20230307210036289.png" class="" title="image-20230307210036289"><p><strong>GET 和 POST 方法都是安全和幂等的吗？</strong></p><p>先说明下安全和幂等的概念：</p><ul><li>在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。</li><li>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。</li></ul><p>如果从 RFC 规范定义的语义来看：</p><ul><li><strong>GET 方法就是安全且幂等的</strong>，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。所以，<strong>可以对 GET 请求的数据做缓存，这个缓存可以做到浏览器本身上（彻底避免浏览器发请求），也可以做到代理上（如nginx），而且在浏览器中 GET 请求可以保存为书签</strong>。</li><li><strong>POST</strong> 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是<strong>不安全</strong>的，且多次提交数据就会创建多个资源，所以<strong>不是幂等</strong>的。所以，<strong>浏览器一般不会缓存 POST 请求，也不能把 POST 请求保存为书签</strong>。</li></ul><p>做个简要的小结。</p><p>GET 的<strong>语义</strong>是<strong>请求获取指定的资源</strong>。GET 方法是<strong>安全、幂等、可被缓存</strong>的。</p><p>POST 的<strong>语义</strong>是根据<strong>请求负荷（报文主体）对指定的资源做出处</strong>理，具体的处理方式视资源类型而不同。POST <strong>不安全，不幂等，（大部分实现）不可缓存</strong>。</p><p>注意， 上面是从 RFC 规范定义的语义来分析的。</p><p>但是实际过程中，开发者不一定会按照 RFC 规范定义的语义来实现 GET 和 POST 方法。比如：</p><ul><li>可以用 GET 方法实现新增或删除数据的请求，这样实现的 GET 方法自然就不是安全和幂等。</li><li>可以用 POST 方法实现查询数据的请求，这样实现的 POST 方法自然就是安全和幂等。</li></ul><p>如果「安全」放入概念是指信息是否会被泄漏的话，虽然 POST 用 body 传输数据，而 GET 用 URL 传输，这样数据会在浏览器地址拦容易看到，但是并不能说 GET 不如 POST 安全的。</p><p>因为 HTTP 传输的内容都是明文的，虽然在浏览器地址拦看不到 POST 提交的 body 数据，但是只要抓个包就都能看到了。</p><p>所以，要避免传输过程中数据被窃取，就要使用 HTTPS 协议，这样所有 HTTP 的数据都会被加密传输。</p><blockquote><p>GET 请求可以带 body 吗？</p></blockquote><p>RFC 规范并没有规定 GET 请求不能带 body 的。理论上，任何请求都可以带 body 的。只是因为 RFC 规范定义的 GET 请求是获取资源，所以根据这个语义不需要用到 body。</p><p>另外，URL 中的查询参数也不是 GET 所独有的，POST 请求的 URL 中也可以有参数的。</p><p><strong>面试中，GET 和 POST的区别：</strong></p><p>GET 和 POST本质上就是TCP链接，并无差别（比如给GET加上request body ，或者给POST带上url参数，技术上是完全行的通的。）但是由于HTTP的规定和浏览器&#x2F;服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>最<strong>核心</strong>的区别：两者的使命不同。</p><p>其他区别：</p><ul><li><p>安全</p></li><li><p>幂等</p></li><li><p>是否可缓存</p></li><li><p>GET产生一个TCP数据包；POST产生两个TCP数据包。（但这其实也只是一些框架的行为，RFC中没有规范）</p><p>  长的说：</p><ul><li><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p></li><li><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p></li></ul><p>  也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>  因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ul><li><p>GET与POST都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></li></ul></li></ul><h3 id="1-6-小结"><a href="#1-6-小结" class="headerlink" title="1.6 小结"></a>1.6 小结</h3><p>HTTP特点：</p><ul><li>客户端&#x2F;服务器模式</li><li>简单快速：客户端向服务器请求服务时，通过传送请求方法、请求地址和数据体（可选）即可。</li><li>灵活：允许传输任意类型的数据对象，通过 Content-Type 标识</li><li>无状态：对事物处理没记忆能力</li></ul><p>小结：</p><ul><li>HTTP 是在网络上传输 HTML 的协议，用于浏览器和服务器的通信，默认使用 80 端口。</li><li>URL 地址用于定位资源，HTTP 中的 GET, POST, PUT, DELETE 用于操作资源，比如查询，增加，更新等。</li><li>GET, PUT, DELETE 是幂等的，POST 是不幂等的。</li><li>POST VS PUT<ul><li>使用 PUT 创建资源需要提供资源的唯一标识（具体存放位置），POST 不需要，POST 的数据存放位置由服务器自己决定</li><li>使用 PUT 更新某一资源，需要更新资源的全部属性；而使用 POST，可以更新全部或一部分值</li><li>POST 是不幂等的，PUT 是幂等的，这是一个很重要的区别</li></ul></li><li>GET 可提交的数据量受到 URL 长度的限制，HTTP 协议规范没有对 URL 长度进行限制，这个限制是特定的浏览器及服务器对它的限制。</li><li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制。</li></ul><p>参考链接：</p><p>[1] <a href="https://cloud.tencent.com/developer/article/1756803">GET和POST请求的本质区别_文1</a></p><p>[2] <a href="https://segmentfault.com/a/1190000018129846">GET和POST请求的本质区别_文2</a></p><p>[3] <a href="https://xiaolincoding.com/network/2_http/http_interview.html">小林coding</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TinyWebSever学习</title>
    <link href="/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="小白视角读懂TinyWebServer"><a href="#小白视角读懂TinyWebServer" class="headerlink" title="小白视角读懂TinyWebServer"></a>小白视角读懂TinyWebServer</h1><p>本文意在对项目有个大体的了解</p><blockquote><p>项目地址：<a href="https://github.com/qinguoyi/TinyWebServer">https://github.com/qinguoyi/TinyWebServer</a></p></blockquote><h2 id="1-什么是WebServer"><a href="#1-什么是WebServer" class="headerlink" title="1. 什么是WebServer"></a>1. 什么是WebServer</h2><p>​一个Web Server就是一个服务器软件（程序），或者是运行这个服务器软件的硬件（计算机）。其主要功能是通过<strong>HTTP协议</strong>与<strong>客户端</strong>（通常是浏览器（Browser））进行通信，来<strong>接收</strong>，<strong>存储</strong>，<strong>处理</strong>来自客户端的<strong>HTTP请求</strong>，并对其请求做出<strong>HTTP响应</strong>，返回给客户端其请求的内容（文件、网页等）或返回一个Error信息。</p><img src="/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/image-20230306161747843.png" class="" title="image-20230306161747843"><h2 id="2-用户如何与你的Web服务器进行通信"><a href="#2-用户如何与你的Web服务器进行通信" class="headerlink" title="2. 用户如何与你的Web服务器进行通信"></a>2. 用户如何与你的Web服务器进行通信</h2><p>​通常用户使用Web浏览器与相应服务器进行通信。在浏览器中键入“域名”或“IP地址:端口号”，浏览器则先将你的域名解析成相应的IP地址或者直接根据你的IP地址向对应的Web服务器发送一个<strong>HTTP请求</strong>。这一过程首先要通过<strong>TCP协议的三次握手</strong>建立与目标Web服务器的连接，然后HTTP协议生成针对目标Web服务器的HTTP请求报文，通过TCP、IP等协议发送到目标Web服务器上。</p><h2 id="3-Web服务器如何接收客户端发来的HTTP请求报文"><a href="#3-Web服务器如何接收客户端发来的HTTP请求报文" class="headerlink" title="3. Web服务器如何接收客户端发来的HTTP请求报文"></a>3. Web服务器如何接收客户端发来的HTTP请求报文</h2><p>Web服务器通过<code>socket</code>监听来自用户的请求</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-comment">/* 创建监听socket文件描述符 */</span><br><span class="hljs-type">int</span> listenfd = socket(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">/* 创建监听socket的TCP/IP的IPV4 socket地址 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span>;</span><br>bzero(&amp;address, <span class="hljs-keyword">sizeof</span>(address));<br>address.sin_family = AF_INET;<br>address.sin_addr.s_addr = htonl(INADDR_ANY);  <span class="hljs-comment">/* INADDR_ANY：将套接字绑定到所有可用的接口 */</span><br>address.sin_port = htons(port);<br><br><span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><span class="hljs-comment">/* SO_REUSEADDR 允许端口被重复使用 */</span><br>setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;flag, <span class="hljs-keyword">sizeof</span>(flag));<br><span class="hljs-comment">/* 绑定socket和它的地址 */</span><br>ret = bind(listenfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, <span class="hljs-keyword">sizeof</span>(address));  <br><span class="hljs-comment">/* 创建监听队列以存放待处理的客户连接，在这些客户连接被accept()之前 */</span><br>ret = listen(listenfd, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>​远端的很多用户会尝试去<code>connect()</code>这个Web Server上正在<code>listen</code>的这个<code>port</code>，而监听到的这些连接会排队等待被<code>accept()</code>。</p><p>​由于用户连接请求是随机到达的异步事件，每当监听socket（<code>listenfd</code>）<code>listen</code>到新的客户连接并且放入监听队列，我们都需要告诉我们的Web服务器有连接来了，<code>accept</code>这个连接，并分配一个逻辑单元来处理这个用户请求。</p><p>​而且，我们在处理这个请求的同时，还需要继续监听其他客户的请求并分配其另一逻辑单元来处理（并发，同时处理多个事件，后面会提到使用线程池实现并发）。这里，服务器通过<strong>epoll</strong>这种I&#x2F;O复用技术（还有select和poll）来实现对<strong>监听socket（<code>listenfd</code>）和连接socket（客户请求）的同时监听</strong>。注意I&#x2F;O复用虽然可以同时监听多个文件描述符，但是它本身是<strong>阻塞</strong>的，并且当有多个文件描述符同时就绪的时候，如果不采取额外措施，程序则只能按顺序处理其中就绪的每一个文件描述符，所以为提高效率，我们将在这部分通过<strong>线程池</strong>(详见线程池实现）来实现并发（多线程并发），为每个就绪的文件描述符分配一个逻辑单元（线程）来处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-comment">/* 将fd上的EPOLLIN和EPOLLET事件注册到epollfd指示的epoll内核事件中 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">addfd</span><span class="hljs-params">(<span class="hljs-type">int</span> epollfd, <span class="hljs-type">int</span> fd, <span class="hljs-type">bool</span> one_shot)</span> &#123;<br>    epoll_event event;<br>    event.data.fd = fd;<br>    event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;<br>    <span class="hljs-comment">/* 针对connfd，开启EPOLLONESHOT，因为我们希望每个socket在任意时刻都只被一个线程处理 */</span><br>    <span class="hljs-keyword">if</span>(one_shot)<br>        event.events |= EPOLLONESHOT;<br>    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event);<br>    setnonblocking(fd);<br>&#125;<br><span class="hljs-comment">/* 创建一个额外的文件描述符来唯一标识内核中的epoll事件表 */</span><br><span class="hljs-type">int</span> epollfd = epoll_create(<span class="hljs-number">5</span>);  <br><span class="hljs-comment">/* 用于存储epoll事件表中就绪事件的event数组 */</span><br>epoll_event events[MAX_EVENT_NUMBER];  <br><span class="hljs-comment">/* 主线程往epoll内核事件表中注册监听socket事件，当listen到新的客户连接时，listenfd变为就绪事件 */</span><br>addfd(epollfd, listenfd, <span class="hljs-literal">false</span>);  <br><span class="hljs-comment">/* 主线程调用epoll_wait等待一组文件描述符上的事件，并将当前所有就绪的epoll_event复制到events数组中 */</span><br><span class="hljs-type">int</span> number = epoll_wait(epollfd, events, MAX_EVENT_NUMBER, <span class="hljs-number">-1</span>);<br><span class="hljs-comment">/* 然后我们遍历这一数组以处理这些已经就绪的事件 */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; number; ++i) &#123;<br>    <span class="hljs-type">int</span> sockfd = events[i].data.fd;  <span class="hljs-comment">// 事件表中就绪的socket文件描述符</span><br>    <span class="hljs-keyword">if</span>(sockfd == listenfd) &#123;  <span class="hljs-comment">// 当listen到新的用户连接，listenfd上则产生就绪事件</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_address</span>;</span><br>        <span class="hljs-type">socklen_t</span> client_addrlength = <span class="hljs-keyword">sizeof</span>(client_address);<br>        <span class="hljs-comment">/* ET模式 */</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">/* accept()返回一个新的socket文件描述符用于send()和recv() */</span><br>            <span class="hljs-type">int</span> connfd = accept(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;client_address, &amp;client_addrlength);<br>            <span class="hljs-comment">/* 并将connfd注册到内核事件表中 */</span><br>            users[connfd].init(connfd, client_address);<br>            <span class="hljs-comment">/* ... */</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(events[i].events &amp; (EPOLLRDHUP | EPOLLHUP | EPOLLERR)) &#123;<br>        <span class="hljs-comment">// 如有异常，则直接关闭客户连接，并删除该用户的timer</span><br>        <span class="hljs-comment">/* ... */</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(events[i].events &amp; EPOLLIN) &#123;<br>        <span class="hljs-comment">/* 当这一sockfd上有可读事件时，epoll_wait通知主线程。*/</span><br>        <span class="hljs-keyword">if</span>(users[sockfd].read()) &#123; <span class="hljs-comment">/* 主线程从这一sockfd循环读取数据, 直到没有更多数据可读 */</span><br>            pool-&gt;append(users + sockfd);  <span class="hljs-comment">/* 然后将读取到的数据封装成一个请求对象并插入请求队列 */</span><br>            <span class="hljs-comment">/* ... */</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">/* ... */</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(events[i].events &amp; EPOLLOUT) &#123;<br>        <span class="hljs-comment">/* 当这一sockfd上有可写事件时，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果 */</span><br>        <span class="hljs-keyword">if</span>(users[sockfd].write()) &#123;<br>            <span class="hljs-comment">/* ... */</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">/* ... */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器程序通常需要处理三类事件：I&#x2F;O事件、信号及定时器事件。</p><p>一般有两种事件处理模式：</p><ul><li><p><strong>Reactor模式（同步I&#x2F;O模式）</strong>：要求主线程（I&#x2F;O处理单元）只负责监听文件描述符上是否有事件发生（可读、可写），若有，则立即通知工作线程（逻辑单元），将socket可读可写事件放入请求队列，交给工作线程处理。除此之外，主线程不做其他任何的工作，读写数据，接受新的连接，以及处理客户请求均在工作线程完成。</p> <img src="/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/image-20230306170628930.png" class="" title="image-20230306170628930"></li><li><p><strong>Proactor模式（异步I&#x2F;O模式）</strong>：将所有的I&#x2F;O操作都交给主线程和内核来处理（进行读、写），工作线程仅负责处理逻辑，如主线程读完成后<code>users[sockfd].read()</code>，选择一个工作线程来处理客户请求<code>pool-&gt;append(users + sockfd)</code>。</p>  <img src="/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/image-20230306170719275.png" class="" title="image-20230306170719275"></li><li><p><strong>采用reactor模拟proactor模式</strong>：主线程执行数据读写操作，读写完成后主线程向工作线程通知这一“完成事件”，那么从工作线程的角度来看，工作线程就获得了数据读写的结果，只要对这些读写结果做逻辑处理（即业务逻辑）</p>  <img src="/2023/03/06/TinyWebSever%E5%AD%A6%E4%B9%A0/image-20230306170910127.png" class="" title="image-20230306170910127"></li></ul><p>通常使用同步I&#x2F;O模型（如<code>epoll_wait</code>）实现Reactor，使用异步I&#x2F;O（如<code>aio_read</code>和<code>aio_write</code>）实现Proactor。但在此项目中，我们使用的是<strong>同步I&#x2F;O模拟的Proactor</strong>事件处理模式<strong>（why？）</strong>。</p><p>那么什么是同步I&#x2F;O，什么是异步I&#x2F;O呢？<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017959540289152">廖雪峰：异步IO一节给出解释</a></p><p>Linux下有三种IO复用方式：epoll，select和poll，为什么用epoll，它和其他两个有什么区别呢？（参考StackOverflow上的一个问题：<a href="https://stackoverflow.com/questions/17355593/why-is-epoll-faster-than-select">Why is epoll faster than select?</a>）</p><ul><li>对于select和poll来说，所有文件描述符都是在用户态被加入其文件描述符集合的，每次调用都需要将整个集合拷贝到内核态；epoll则将整个文件描述符集合维护在内核态，每次添加文件描述符的时候都需要执行一个系统调用。系统调用的开销是很大的，而且在有很多短期活跃连接的情况下，epoll可能会慢于select和poll由于这些大量的系统调用开销。</li><li>select使用线性表描述文件描述符集合，文件描述符有上限；poll使用链表来描述；epoll底层通过红黑树来描述，并且维护一个ready list，将事件表中已经就绪的事件添加到这里，在使用epoll_wait调用时，仅观察这个list中有没有数据即可。</li><li>select和poll的最大开销来自内核判断是否有文件描述符就绪这一过程：每次执行select或poll调用时，它们会采用遍历的方式，遍历整个文件描述符集合去判断各个文件描述符是否有活动；epoll则不需要去以这种方式检查，当有活动产生时，会自动触发epoll回调函数通知epoll文件描述符，然后内核将这些就绪的文件描述符放到之前提到的ready list中等待epoll_wait调用后被处理。</li><li>select和poll都只能工作在相对低效的LT模式下，而epoll同时支持LT和ET模式。</li><li>综上，当监测的fd数量较小，且各个fd都很活跃的情况下，建议使用select和poll；当监听的fd数量较多，且单位时间仅部分fd活跃的情况下，使用epoll会明显提升性能。</li></ul><p><code>Epoll</code>对文件操作符的操作有两种模式：LT（电平触发）和ET（边缘触发），二者的区别在于当你调用<code>epoll_wait</code>的时候内核里面发生了什么：</p><ul><li>LT（电平触发）：类似<code>select</code>，LT会去遍历在epoll事件表中每个文件描述符，来观察是否有我们感兴趣的事件发生，如果有（触发了该文件描述符上的回调函数），<code>epoll_wait</code>就会以非阻塞的方式返回。若该epoll事件没有被处理完（没有返回<code>EWOULDBLOCK</code>），该事件还会被后续的<code>epoll_wait</code>再次触发。</li><li>ET（边缘触发）：ET在发现有我们感兴趣的事件发生后，立即返回，并且<code>sleep</code>这一事件的<code>epoll_wait</code>，不管该事件有没有结束。</li></ul><p>在使用ET模式时，必须要保证该文件描述符是非阻塞的（确保在没有数据可读时，该文件描述符不会一直阻塞）；并且每次调用<code>read</code>和<code>write</code>的时候都必须等到它们返回<code>EWOULDBLOCK</code>（确保所有数据都已读完或写完）。</p><h2 id="4-Web服务器如何处理以及响应收到的HTTP请求报文"><a href="#4-Web服务器如何处理以及响应收到的HTTP请求报文" class="headerlink" title="4. Web服务器如何处理以及响应收到的HTTP请求报文"></a>4. Web服务器如何处理以及响应收到的HTTP请求报文</h2><p>该项目使用<strong>线程池</strong>（半同步半反应堆模式）并发处理用户请求，<strong>主线程负责读写</strong>，<strong>工作线程（线程池中的线程）负责处理逻辑（HTTP请求报文的解析等等</strong>）。通过之前的代码，我们将<code>listenfd</code>上到达的<code>connection</code>通过 <code>accept()</code>接收，并返回一个新的socket文件描述符<code>connfd</code>用于和用户通信，并对用户请求返回响应，同时将这个<code>connfd</code>注册到内核事件表中，等用户发来请求报文。这个过程是：通过<code>epoll_wait</code>发现这个<code>connfd</code>上有可读事件了（<code>EPOLLIN</code>），主线程就将这个HTTP的请求报文读进这个连接socket的读缓存中<code>users[sockfd].read()</code>，然后将该任务对象（指针）插入线程池的请求队列中<code>pool-&gt;append(users + sockfd);</code>，线程池的实现还需要依靠<strong>锁机制</strong>以及<strong>信号量</strong>机制来实现线程同步，保证操作的原子性。<br>在线程池部分做几点解释，然后大家去看代码的时候就更容易看懂了：</p><ul><li>所谓线程池，就是一个<code>pthread_t</code>类型的普通数组，通过<code>pthread_create()</code>函数创建<code>m_thread_number</code>个<strong>线程</strong>，用来执行<code>worker()</code>函数以执行每个请求处理函数（HTTP请求的<code>process</code>函数），通过<code>pthread_detach()</code>将线程设置成脱离态（detached）后，当这一线程运行结束时，它的资源会被系统自动回收，而不再需要在其它线程中对其进行 <code>pthread_join()</code> 操作。</li><li>操作工作队列一定要加锁（<code>locker</code>），因为它被所有线程共享。</li><li>我们用信号量来标识请求队列中的请求数，通过<code>m_queuestat.wait();</code>来等待一个请求队列中待处理的HTTP请求，然后交给线程池中的空闲线程来处理。</li></ul><p><strong>为什么要使用线程池？</strong></p><p>当你需要限制你应用程序中同时运行的线程数时，线程池非常有用。因为启动一个新线程会带来性能开销，每个线程也会为其堆栈分配一些内存等。为了任务的并发执行，我们可以将这些任务任务传递到线程池，而不是为每个任务动态开启一个新的线程。</p><p>线程池中的线程数量的依据？</p><blockquote><p>线程池中的线程数量最直接的限制因素是中央处理器(CPU)的处理器(processors&#x2F;cores)的数量<code>N</code>：如果你的CPU是4-cores的，对于CPU密集型的任务(如视频剪辑等消耗CPU计算资源的任务)来说，那线程池中的线程数量最好也设置为4（或者+1防止其他因素造成的线程阻塞）；对于IO密集型的任务，一般要多于CPU的核数，因为线程间竞争的不是CPU的计算资源而是IO，IO的处理一般较慢，多于cores数的线程将为CPU争取更多的任务，不至在线程处理IO的过程造成CPU空闲导致资源浪费，公式：<code>最佳线程数 = CPU当前可使用的Cores数 * 当前CPU的利用率 * (1 + CPU等待时间 / CPU处理时间)</code></p></blockquote><p>接下来说说每个<code>read()</code>后的HTTP请求是如何被处理的，先看处理HTTP请求的入口函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void http_conn::process<span class="hljs-literal">()</span> &#123;<br>    HTTP_CODE read_ret = process<span class="hljs-constructor">_read()</span>;<br>    <span class="hljs-keyword">if</span>(read_ret<span class="hljs-operator"> == </span>NO_REQUEST) &#123;<br>        modfd(m_epollfd, m_sockfd, EPOLLIN);<br>        return;<br>    &#125;<br>    <span class="hljs-built_in">bool</span> write_ret = process<span class="hljs-constructor">_write(<span class="hljs-params">read_ret</span>)</span>;<br>    <span class="hljs-keyword">if</span>(!write_ret)<br>        close<span class="hljs-constructor">_conn()</span>;<br>    modfd(m_epollfd, m_sockfd, EPOLLOUT);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，<code>process_read()</code>，也就是对我们读入该<code>connfd</code>读缓冲区的请求报文进行解析。<br>HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据四个部分组成有。两种请求报文（例子来自社长的<a href="https://mp.weixin.qq.com/s/BfnNl-3jc_x5WPrWEJGdzQ">详解文章</a>：</p><p> <strong>Get</strong>(example)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/562f25980001b1b106000338.jpg HTTP/</span><span class="hljs-number">1.1</span><br>Host:img.mukewang.com<br>User-Agent:Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; WOW64)<br>AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="hljs-number">51.0</span>.<span class="hljs-number">2704.106</span> Safari/<span class="hljs-number">537.36</span><br>Accept:image<span class="hljs-regexp">/webp,image/</span>*,*/*;q=<span class="hljs-number">0.8</span><br>Referer:http:<span class="hljs-regexp">//</span>www.imooc.com/<br>Accept-Encoding:gzip, deflate, sdch<br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.8</span><br>空行<br>请求数据为空<br></code></pre></td></tr></table></figure><p><strong>Post</strong>(example,注意Post的请求内容不为空)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">POST</span> / <span class="hljs-variable constant_">HTTP1</span>.<span class="hljs-number">1</span><br><span class="hljs-title class_">Host</span><span class="hljs-symbol">:www</span>.wrox.com<br><span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span><span class="hljs-symbol">:Mozilla/</span><span class="hljs-number">4.0</span> (compatible; <span class="hljs-variable constant_">MSIE</span> <span class="hljs-number">6.0</span>; <span class="hljs-title class_">Windows</span> <span class="hljs-variable constant_">NT</span> <span class="hljs-number">5.1</span>; <span class="hljs-variable constant_">SV1</span>; .<span class="hljs-variable constant_">NET</span> <span class="hljs-variable constant_">CLR</span> <span class="hljs-number">2.0</span>.<span class="hljs-number">50727</span>; .<span class="hljs-variable constant_">NET</span> <span class="hljs-variable constant_">CLR</span> <span class="hljs-number">3.0</span>.<span class="hljs-number">04506</span>.<span class="hljs-number">648</span>; .<span class="hljs-variable constant_">NET</span> <span class="hljs-variable constant_">CLR</span> <span class="hljs-number">3.5</span>.<span class="hljs-number">21022</span>)<br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span><span class="hljs-symbol">:application/x-www-form-urlencoded</span><br><span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Length</span><span class="hljs-symbol">:</span><span class="hljs-number">40</span><br><span class="hljs-title class_">Connection</span>: <span class="hljs-title class_">Keep</span>-<span class="hljs-title class_">Alive</span><br>空行<br>name=<span class="hljs-title class_">Professional</span>%20Ajax&amp;publisher=<span class="hljs-title class_">Wiley</span><br></code></pre></td></tr></table></figure><p>Get 和 Post 的区别</p><ul><li>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制。（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。</li><li>GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100（指示信息—表示请求已接收，继续处理）continue，浏览器再发送data，服务器响应200 ok（返回数据）。</li></ul><p>参考社长的文章：<a href="https://mp.weixin.qq.com/s/wAQHU-QZiRt1VACMZZjNlw">最新版Web服务器项目详解 - 05 http连接处理（中）</a><br><code>process_read()</code>函数的作用就是将类似上述例子的请求报文进行解析，因为用户的请求内容包含在这个请求报文里面，只有通过解析，知道用户请求的内容是什么，是请求图片，还是视频，或是其他请求，我们根据这些请求返回相应的HTML页面等。项目中使用<strong>主从状态机</strong>的模式进行解析，从状态机（<code>parse_line</code>）负责读取报文的一行，主状态机负责对该行数据进行解析，主状态机内部调用从状态机，从状态机驱动主状态机。每解析一部分都会将整个请求的<code>m_check_state</code>状态改变，状态机也就是根据这个状态来进行不同部分的解析跳转的：</p><ul><li><code>parse_request_line(text)</code>，解析请求行，也就是GET中的<code>GET /562f25980001b1b106000338.jpg HTTP/1.1</code>这一行，或者POST中的<code>POST / HTTP1.1</code>这一行。通过请求行的解析我们可以判断该HTTP请求的类型（GET&#x2F;POST），而请求行中最重要的部分就是<code>URL</code>部分，我们会将这部分保存下来用于后面的生成HTTP响应。</li><li><code>parse_headers(text);</code>，解析请求头部，GET和POST中<code>空行</code>以上，请求行以下的部分。</li><li><code>parse_content(text);</code>，解析请求数据，对于GET来说这部分是空的，因为这部分内容已经以明文的方式包含在了请求行中的<code>URL</code>部分了；只有POST的这部分是有数据的，项目中的这部分数据为用户名和密码，我们会根据这部分内容做登录和校验，并涉及到与数据库的连接。</li></ul><p>OK，经过上述解析，当得到一个完整的，正确的HTTP请求时，就到了<code>do_request</code>代码部分，我们需要首先对GET请求和不同POST请求（登录，注册，请求图片，视频等等）做不同的预处理，然后分析目标文件的属性，若目标文件存在、对所有用户可读且不是目录时，则使用<code>mmap</code>将其映射到内存地址<code>m_file_address</code>处，并告诉调用者获取文件成功。</p><p>抛开<code>mmap</code>这部分，先来看看这些不同请求是怎么来的：<br>假设你已经搭好了你的HTTP服务器，然后你在本地浏览器中键入<code>localhost:9000</code>，然后回车，这时候你就给你的服务器发送了一个GET请求，什么都没做，然后服务器端就会解析你的这个HTTP请求，然后发现是个GET请求，然后返回给你一个静态HTML页面，也就是项目中的<code>judge.html</code>页面，那POST请求怎么来的呢？这时你会发现，返回的这个<code>judge</code>页面中包含着一些<code>新用户</code>和<code>已有账号</code>这两个<code>button</code>元素，当你用鼠标点击这个<code>button</code>时，你的浏览器就会向你的服务器发送一个POST请求，服务器段通过检查<code>action</code>来判断你的POST请求类型是什么，进而做出不同的响应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html">/* judge.html */<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebServer<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>欢迎访问<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>新用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span>已有账号<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
      <category>TinyWebServer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2023/03/06/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2023/03/06/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="一、概况"><a href="#一、概况" class="headerlink" title="一、概况"></a>一、概况</h2><ol><li>类型：快慢指针（相同方向循环），对撞指针（相反方向循环）、滑动窗口</li><li>用途：提高效率，通常能将O（n^2）的时间复杂度降为O（n）</li><li>可以应用的数据结构：<strong>数组、链表、字符串</strong></li><li>应用场景：<ul><li>要用到遍历、循环、双层for循环时，立马想到双指针法</li><li>普通双指针：反转链表、链表中的虚拟头结点法（这里归类可能不恰当）</li><li>快慢指针：删除重复元素或倒数第n个节点、判断链表是否有环、N数之和、</li><li>对撞指针：二分查找、翻转字符串等</li><li>滑动窗口：在数组或者链表某个连续的区间上的操作，比如求最长&#x2F;最短子字符串、长度最小子数组</li></ul></li></ol><h2 id="二、相关题目"><a href="#二、相关题目" class="headerlink" title="二、相关题目"></a>二、相关题目</h2><h3 id="（一）、对撞指针"><a href="#（一）、对撞指针" class="headerlink" title="（一）、对撞指针"></a>（一）、对撞指针</h3><ol><li><h4 id="剑指-Offer-57-和为s的两个数字"><a href="#剑指-Offer-57-和为s的两个数字" class="headerlink" title="剑指 Offer 57. 和为s的两个数字"></a><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指 Offer 57. 和为s的两个数字</a></h4><ul><li><p>题目要求：<img src="/2023/03/06/%E5%8F%8C%E6%8C%87%E9%92%88/image-20230306135958872.png" class="" title="image-20230306135958872"></p></li><li><p>思路：跟两数之和差不多，区别在于本题数组递增，所以可以考虑双指针</p></li><li><p>解法：</p><ul><li><p><strong>哈希表</strong>：遍历一次，第一次遍历时将数<code>x</code>存入，并判断<code>target - x</code>是否已在表中</p></li><li><p><strong>双指针</strong>：指针<code>i</code>、<code>j</code>分别置于首尾，若<code>nums[i] + nums[j] - target</code> 则<code>i++</code>，若<code>nums[i]+nums[j]&gt;target</code>则<code>j--</code></p></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hot100-406-身高重建队列</title>
    <link href="/2023/03/01/hot100-406-%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/"/>
    <url>/2023/03/01/hot100-406-%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<ul><li><p>题目</p>  <img src="/2023/03/01/hot100-406-%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/image-20230301204934735.png" class="" title="image-20230301204934735"></li><li><p>小套路：<strong>一般这种数对，还涉及排序的，根据第一个元素正向排序，根据第二个元素反向排序，或者根据第一个元素反向排序，根据第二个元素正向排序，往往能够简化解题过程。</strong></p></li><li><p>思路：首先对数对进行排序，按照数对的元素 1 降序排序，按照数对的元素 2 升序排序。原因是，按照元素 1 进行降序排序，对于每个元素，在其之前的元素的个数，就是大于等于他的元素的数量，而按照第二个元素正向排序，我们希望 k 大的尽量在后面，减少插入操作的次数。</p></li><li><p>代码：</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &gt; b[<span class="hljs-number">0</span>];<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; people) &#123;<br>        <span class="hljs-built_in">sort</span> (people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(), cmp);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; que;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; people.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> position = people[i][<span class="hljs-number">1</span>];<br>            que.<span class="hljs-built_in">insert</span>(que.<span class="hljs-built_in">begin</span>() + position, people[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> que;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>注：此题应为贪心算法，今天第一次接触，所以是看了题解。希望过段时间能够自己独立解出。从这道题中还学到了出现一对的数据时的处理方法。23年3月1日。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>hot100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>贪心算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>myFirstBlog</title>
    <link href="/2023/02/28/myFirstBlog/"/>
    <url>/2023/02/28/myFirstBlog/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一个博客"><a href="#我的第一个博客" class="headerlink" title="我的第一个博客"></a>我的第一个博客</h1><p>好吧，严格意义上并不是，之前在 CSDN 那已经发过几篇小记录了。</p><p>这篇文章主要用于记录一下，决定开始写些技术博客。虽然大多数估计只是一些八股之类的东西。蛮记录着吧。挺后悔之前学习的时候都没怎么记录了。从现在开始吧。</p><blockquote><p>栽一棵树最好的时间是十年前，其次是现在。</p></blockquote><p>顺便测试一下图片上传功能，整了一个晚上呢。</p><img src="/2023/02/28/myFirstBlog/image-20230228223507268.png" class="" title="image-20230228223507268">]]></content>
    
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/23/hello-world/"/>
    <url>/2023/02/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
